xcan.validator.constraints.CharConstant.message=Invalid character constant value: ${validatedValue}
xcan.validator.constraints.CollectionCharLength.message=The collection string value exceeds the length {maxLength} limit
xcan.validator.constraints.CollectionValueNotNull.message=Collection element value cannot be null
xcan.validator.constraints.DigitsConstant.message=Invalid numeric constant value: ${validatedValue}
xcan.validator.constraints.EnumPart.message=Unsupported enum constant value: ${validatedValue}
xcan.validator.constraints.EnumValue.message=Invalid enum value : ${validatedValue}
xcan.validator.constraints.ClassField.message=Invalid class field : ${validatedValue}
xcan.validator.constraints.MapCharLength.message=The map string value exceeds the length key: {keyMaxLength} value: {valueMaxLength} limit
xcan.validator.constraints.Mobile.message=Invalid mobile ${validatedValue}
xcan.validator.constraints.Version.message=Invalid version value ${validatedValue}
xcan.validator.constraints.ID.message=Invalid ID: ${validatedValue}, valid range: 1 to {max}
xcan.validator.constraints.Code.message=Invalid code: ${validatedValue}, Must consist of letters, numbers or underline
xcan.validator.constraints.Name.message=Invalid name: ${validatedValue}, Must consist of letters, numbers or chars `!@$%^&*()_\\-+=`
xcan.validator.constraints.Blank.message=Invalid value ${validatedValue}, The string needs to contain only spaces ( ), empty () or null characters
xcan.validator.constraints.CreditCard.message=Invalid value ${validatedValue}, The string needs to represent a valid credit card number of type(s): {value}
xcan.validator.constraints.IPv4.message=Invalid value ${validatedValue}, The string needs to represent a valid IPv4 address
xcan.validator.constraints.IPv6.message=Invalid value ${validatedValue}, The string needs to represent a valid IPv6 address
xcan.validator.constraints.Port.message=${validatedValue} is invalid port value, valid value range: {min} - {max}
xcan.validator.constraints.Password.message=${validatedValue} does not meet with the password security policy
xcan.validator.constraints.HttpStatusRange.message=${validatedValue} is invalid status code value, valid value range: {min} - {max}
xcan.validator.constraints.TimeValueRange.message=${validatedValue} is an invalid time value, valid value range: {minInMs}(ms)-{maxInMs}(ms)
xcan.validator.constraints.of.InstanceOf.message=${validatedValue} is an instance of the required classes: {value}
xcan.validator.constraints.of.NotInstanceOf.message=${validatedValue} is not an instance of the excluded classes: {value}
xcan.validator.constraints.of.OneOfChars.message=${validatedValue} cannot be found in the list: {value}
xcan.validator.constraints.of.OneOfDoubles.message=${validatedValue} cannot be found in the list: {value}
xcan.validator.constraints.of.OneOfIntegers.message=${validatedValue} cannot be found in the list: {value}
xcan.validator.constraints.of.OneOfLongs.message=${validatedValue} cannot be found in the list: {value}
xcan.validator.constraints.of.OneOfStrings.message=${validatedValue} cannot be found in the list: {value}
xcan.validator.constraints.string.Alpha.message=Invalid value ${validatedValue}, The string needs to contain only unicode letters
xcan.validator.constraints.string.Alphanumeric.message=Invalid value ${validatedValue}, The string needs to contain only unicode letters or digits
xcan.validator.constraints.string.AlphanumericSpace.message=Invalid value ${validatedValue}, The string needs to contain only unicode letters, digits or spaces ( )
xcan.validator.constraints.string.AlphaSpace.message=Invalid value ${validatedValue}, The string needs to contain only unicode letters or spaces ( )
xcan.validator.constraints.string.AsciiPrintable.message=Invalid value ${validatedValue}, The string needs to contain only printable ascii characters
xcan.validator.constraints.string.LowerCase.message=Invalid value ${validatedValue}, The string needs to contain only lower case letters
xcan.validator.constraints.string.Numeric.message=Invalid value ${validatedValue}, The string needs be a number
xcan.validator.constraints.string.StartsWith.message=Invalid value ${validatedValue}, The string needs to start with the give prefix(es): {value}
xcan.validator.constraints.string.EndsWith.message=Invalid value ${validatedValue}, The string needs to end with the give suffix(es): {value}
xcan.validator.constraints.string.uppercase.message=Invalid value ${validatedValue}, The string needs to contain only upper case letters
