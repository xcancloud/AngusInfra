javax.validation.constraints.AssertFalse.message=must be false
javax.validation.constraints.AssertTrue.message=must be true
javax.validation.constraints.DecimalMax.message=must be less than ${inclusive ==true ? 'or equal to ' : ''}{value}
javax.validation.constraints.DecimalMin.message=must be greater than ${inclusive ==true ? 'or equal to ' : ''}{value}
javax.validation.constraints.Digits.message=numeric value out of bounds (<{integer} digits>.<{fraction} digits> expected)
javax.validation.constraints.Email.message=must be a well-formed email address
javax.validation.constraints.Future.message=must be a future date
javax.validation.constraints.FutureOrPresent.message=must be a date in the present or in the future
javax.validation.constraints.Max.message=must be less than or equal to {value}
javax.validation.constraints.Min.message=must be greater than or equal to {value}
javax.validation.constraints.Negative.message=must be less than 0
javax.validation.constraints.NegativeOrZero.message=must be less than or equal to 0
javax.validation.constraints.NotBlank.message=must not be blank
javax.validation.constraints.NotEmpty.message=must not be empty
javax.validation.constraints.NotNull.message=must not be null
javax.validation.constraints.Null.message=must be null
javax.validation.constraints.Past.message=must be a past date
javax.validation.constraints.PastOrPresent.message=must be a date in the past or in the present
javax.validation.constraints.Pattern.message=must match "{regexp}"
javax.validation.constraints.Positive.message=must be greater than 0
javax.validation.constraints.PositiveOrZero.message=must be greater than or equal to 0
javax.validation.constraints.Size.message=size must be between {min} and {max}
org.hibernate.validator.constraints.CreditCardNumber.message=invalid credit card number
org.hibernate.validator.constraints.Currency.message=invalid currency (must be one of {value})
org.hibernate.validator.constraints.EAN.message=invalid {type} barcode
org.hibernate.validator.constraints.Email.message=not a well-formed email address
org.hibernate.validator.constraints.ISBN.message=invalid ISBN
org.hibernate.validator.constraints.Length.message=length must be between {min} and {max}
org.hibernate.validator.constraints.CodePointLength.message=length must be between {min} and {max}
org.hibernate.validator.constraints.LuhnCheck.message=the check digit for ${validatedValue} is invalid, Luhn Modulo 10 checksum failed
org.hibernate.validator.constraints.Mod10Check.message=the check digit for ${validatedValue} is invalid, Modulo 10 checksum failed
org.hibernate.validator.constraints.Mod11Check.message=the check digit for ${validatedValue} is invalid, Modulo 11 checksum failed
org.hibernate.validator.constraints.ModCheck.message=the check digit for ${validatedValue} is invalid, {modType} checksum failed
org.hibernate.validator.constraints.Normalized.message=must be normalized
org.hibernate.validator.constraints.NotBlank.message=may not be empty
########################################################
xcan.validator.constraints.CharConstant.message=Invalid character constant value: ${validatedValue}
xcan.validator.constraints.CollectionCharLength.message=The collection string value exceeds the length {maxLength} limit
xcan.validator.constraints.CollectionValueNotNull.message=Collection element value cannot be null
xcan.validator.constraints.DigitsConstant.message=Invalid numeric constant value: ${validatedValue}
xcan.validator.constraints.EnumPart.message=Unsupported enum constant value: ${validatedValue}
xcan.validator.constraints.EnumValue.message=Invalid enum value : ${validatedValue}
xcan.validator.constraints.ClassField.message=Invalid class field : ${validatedValue}
xcan.validator.constraints.MapCharLength.message=The map string value exceeds the length key: {keyMaxLength} value: {valueMaxLength} limit
xcan.validator.constraints.Mobile.message=Invalid mobile ${validatedValue}
xcan.validator.constraints.Version.message=Invalid version value ${validatedValue}
xcan.validator.constraints.ID.message=Invalid ID: ${validatedValue}, valid range: 1 to {max}
xcan.validator.constraints.Code.message=Invalid code: ${validatedValue}, Must consist of letters, numbers or underline
xcan.validator.constraints.Name.message=Invalid name: ${validatedValue}, Must consist of letters, numbers or chars `!@$%^&*()_\\-+=`
xcan.validator.constraints.Blank.message=Invalid value ${validatedValue}, The string needs to contain only spaces ( ), empty () or null characters
xcan.validator.constraints.CreditCard.message=Invalid value ${validatedValue}, The string needs to represent a valid credit card number of type(s): {value}
xcan.validator.constraints.IPv4.message=Invalid value ${validatedValue}, The string needs to represent a valid IPv4 address
xcan.validator.constraints.IPv6.message=Invalid value ${validatedValue}, The string needs to represent a valid IPv6 address
xcan.validator.constraints.Port.message=${validatedValue} is invalid port value, valid value range: {min} - {max}
xcan.validator.constraints.Password.message=${validatedValue} does not meet with the password security policy
xcan.validator.constraints.HttpStatusRange.message=${validatedValue} is invalid status code value, valid value range: {min} - {max}
xcan.validator.constraints.TimeValueRange.message=${validatedValue} is an invalid time value, valid value range: {minInMs}(ms)-{maxInMs}(ms)
xcan.validator.constraints.of.InstanceOf.message=${validatedValue} is an instance of the required classes: {value}
xcan.validator.constraints.of.NotInstanceOf.message=${validatedValue} is not an instance of the excluded classes: {value}
xcan.validator.constraints.of.OneOfChars.message=${validatedValue} cannot be found in the list: {value}
xcan.validator.constraints.of.OneOfDoubles.message=${validatedValue} cannot be found in the list: {value}
xcan.validator.constraints.of.OneOfIntegers.message=${validatedValue} cannot be found in the list: {value}
xcan.validator.constraints.of.OneOfLongs.message=${validatedValue} cannot be found in the list: {value}
xcan.validator.constraints.of.OneOfStrings.message=${validatedValue} cannot be found in the list: {value}
xcan.validator.constraints.string.Alpha.message=Invalid value ${validatedValue}, The string needs to contain only unicode letters
xcan.validator.constraints.string.Alphanumeric.message=Invalid value ${validatedValue}, The string needs to contain only unicode letters or digits
xcan.validator.constraints.string.AlphanumericSpace.message=Invalid value ${validatedValue}, The string needs to contain only unicode letters, digits or spaces ( )
xcan.validator.constraints.string.AlphaSpace.message=Invalid value ${validatedValue}, The string needs to contain only unicode letters or spaces ( )
xcan.validator.constraints.string.AsciiPrintable.message=Invalid value ${validatedValue}, The string needs to contain only printable ascii characters
xcan.validator.constraints.string.LowerCase.message=Invalid value ${validatedValue}, The string needs to contain only lower case letters
xcan.validator.constraints.string.Numeric.message=Invalid value ${validatedValue}, The string needs be a number
xcan.validator.constraints.string.StartsWith.message=Invalid value ${validatedValue}, The string needs to start with the give prefix(es): {value}
xcan.validator.constraints.string.EndsWith.message=Invalid value ${validatedValue}, The string needs to end with the give suffix(es): {value}
xcan.validator.constraints.string.uppercase.message=Invalid value ${validatedValue}, The string needs to contain only upper case letters
